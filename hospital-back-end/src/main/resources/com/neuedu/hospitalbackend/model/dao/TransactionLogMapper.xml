<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.neuedu.hospitalbackend.model.dao.TransactionLogMapper">

    <resultMap id="BaseResultMap" type="TransactionLog" >
        <result column="id" property="id" jdbcType="INTEGER" />
        <result column="invoice_code" property="invoiceCode" jdbcType="CHAR" />
        <result column="registration_id" property="registrationId" jdbcType="INTEGER" />
        <result column="patient_id" property="patientId" jdbcType="INTEGER" />
        <result column="role_id" property="roleId" jdbcType="INTEGER" />
        <result column="cashier_id" property="cashierId" jdbcType="INTEGER" />
        <result column="type" property="type" jdbcType="VARCHAR" />
        <result column="collection_id" property="collectionId" jdbcType="INTEGER" />
        <result column="project_id" property="projectId" jdbcType="INTEGER" />
        <result column="project_name" property="projectName" jdbcType="VARCHAR" />
        <result column="item_id" property="itemId" jdbcType="VARCHAR" />
        <result column="item_name" property="itemName" jdbcType="VARCHAR" />
        <result column="amount" property="amount" jdbcType="SMALLINT" />
        <result column="pay_type" property="payType" jdbcType="TINYINT" />
        <result column="total_money" property="totalMoney" jdbcType="DECIMAL" />
        <result column="status" property="status" jdbcType="TINYINT" />
        <result column="is_frozen" property="isFrozen" jdbcType="TINYINT"/>
        <result column="gmt_create" property="gmtCreate" jdbcType="TIMESTAMP" />
        <result column="gmt_modified" property="gmtModified" jdbcType="TIMESTAMP" />
    </resultMap>

    <insert id="insert" parameterType="TransactionLog" useGeneratedKeys="true" keyProperty="id">
        insert into transaction_log (id, invoice_code, registration_id,
          patient_id, role_id, cashier_id, type,
          collection_id, project_id, item_id,
          amount, pay_type, total_money,
          status, gmt_create, gmt_modified
          )
        values (#{id,jdbcType=INTEGER}, #{invoiceCode,jdbcType=CHAR}, #{registrationId,jdbcType=INTEGER},
          #{patientId,jdbcType=INTEGER}, #{roleId,jdbcType=INTEGER}, #{cashierId,jdbcType=INTEGER}, #{type,jdbcType=VARCHAR},
          #{collectionId,jdbcType=INTEGER}, #{projectId,jdbcType=INTEGER}, #{itemId,jdbcType=VARCHAR},
          #{amount,jdbcType=SMALLINT}, #{payType,jdbcType=TINYINT}, #{totalMoney,jdbcType=DECIMAL},
          #{status,jdbcType=TINYINT}, #{gmtCreate,jdbcType=TIMESTAMP}, #{gmtModified,jdbcType=TIMESTAMP}
          )
    </insert>

    <insert id="insertSelective" parameterType="TransactionLog" useGeneratedKeys="true" keyProperty="id">
        insert into transaction_log
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="invoiceCode != null">
                invoice_code,
            </if>
            <if test="registrationId != null">
                registration_id,
            </if>
            <if test="patientId != null">
                patient_id,
            </if>
            <if test="roleId != null">
                role_id,
            </if>
            <if test="cashierId != null">
                cashier_id,
            </if>
            <if test="type != null">
                type,
            </if>
            <if test="collectionId != null">
                collection_id,
            </if>
            <if test="projectId != null">
                project_id,
            </if>
            <if test="projectName != null">
                project_name,
            </if>
            <if test="itemId != null">
                item_id,
            </if>
            <if test="itemName != null">
                item_name,
            </if>
            <if test="amount != null">
                amount,
            </if>
            <if test="payType != null">
                pay_type,
            </if>
            <if test="totalMoney != null">
                total_money,
            </if>
            <if test="status != null">
                status,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="invoiceCode != null">
                #{invoiceCode,jdbcType=CHAR},
            </if>
            <if test="registrationId != null">
                #{registrationId,jdbcType=INTEGER},
            </if>
            <if test="patientId != null">
                #{patientId,jdbcType=INTEGER},
            </if>
            <if test="roleId != null">
                #{roleId,jdbcType=INTEGER},
            </if>
            <if test="cashierId != null">
                #{cashierId,jdbcType=INTEGER},
            </if>
            <if test="type != null">
                #{type,jdbcType=VARCHAR},
            </if>
            <if test="collectionId != null">
                #{collectionId,jdbcType=INTEGER},
            </if>
            <if test="projectId != null">
                #{projectId,jdbcType=INTEGER},
            </if>
            <if test="projectName != null">
                #{projectName,jdbcType=VARCHAR},
            </if>
            <if test="itemId != null">
                #{itemId,jdbcType=VARCHAR},
            </if>
            <if test="itemName != null">
                #{itemName,jdbcType=VARCHAR},
            </if>
            <if test="amount != null">
                #{amount,jdbcType=INTEGER},
            </if>
            <if test="payType != null">
                #{payType,jdbcType=TINYINT},
            </if>
            <if test="totalMoney != null">
                #{totalMoney,jdbcType=DECIMAL},
            </if>
            <if test="status != null">
                #{status,jdbcType=TINYINT},
            </if>
        </trim>
    </insert>

    <update id="update" parameterType="TransactionLog">
        update transaction_log
        <trim prefix="set" suffixOverrides=",">
            <if test="invoiceCode != null"> invoice_code = #{invoiceCode}, </if>
            <if test="registrationId != null"> registration_id = #{registrationId}, </if>
            <if test="patientId != null"> patient_id = #{patientId}, </if>
            <if test="roleId != null"> role_id = #{roleId}, </if>
            <if test="cashierId != null"> cashier_id = #{cashierId}, </if>
            <if test="type != null"> type = #{type}, </if>
            <if test="collectionId != null"> collection_id = #{collectionId}, </if>
            <if test="projectId != null"> project_id = #{projectId}, </if>
            <if test="projectName != null"> project_name = #{projectName}, </if>
            <if test="itemId != null"> item_id = #{itemId}, </if>
            <if test="itemName != null"> item_name = #{itemName}, </if>
            <if test="amount != null"> amount = #{amount}, </if>
            <if test="payType != null"> pay_type = #{payType}, </if>
            <if test="totalMoney != null"> total_money = #{totalMoney}, </if>
            <if test="status != null"> status = #{status}, </if>
            <if test="isFrozen != null"> is_frozen = #{isFrozen}, </if>
        </trim>
        where id = #{id}
    </update>

    <select id="getLogByRegistrationIdAndType" resultMap="BaseResultMap">
        select * from transaction_log
        where registration_id = #{registrationId} and type = #{type} and status = 2
    </select>

    <resultMap id="ItemResultMap" type="HashMap" >
        <result column="id" property="id" jdbcType="INTEGER" />
        <result column="invoice_code" property="invoiceCode" jdbcType="CHAR" />
        <result column="registration_id" property="registrationId" jdbcType="INTEGER" />
        <result column="patient_id" property="patientId" jdbcType="INTEGER" />
        <result column="role_id" property="roleId" jdbcType="INTEGER" />
        <result column="cashier_id" property="cashierId" jdbcType="INTEGER" />
        <result column="type" property="type" jdbcType="VARCHAR" />
        <result column="collection_id" property="collectionId" jdbcType="INTEGER" />
        <result column="project_id" property="projectId" jdbcType="INTEGER" />
        <result column="project_name" property="projectName" jdbcType="VARCHAR" />
        <result column="item_id" property="itemId" jdbcType="VARCHAR" />
        <result column="item_name" property="itemName" jdbcType="VARCHAR" />
        <result column="amount" property="amount" jdbcType="SMALLINT" />
        <result column="pay_type" property="payType" jdbcType="TINYINT" />
        <result column="total_money" property="totalMoney" jdbcType="DECIMAL" />
        <result column="status" property="status" jdbcType="TINYINT" />
        <result column="gmt_create" property="gmtCreate" jdbcType="TIMESTAMP" />
        <result column="gmt_modified" property="gmtModified" jdbcType="TIMESTAMP" />
        <result column="project_status" property="projectStatus" jdbcType="TINYINT"/>
        <result column="department_id" property="departmentId" jdbcType="INTEGER"/>
        <result column="remain_amount" property="remainAmount" jdbcType = "SMALLINT"/>
        <result column="total_amount" property="originalAmount" jdbcType="SMALLINT"/>
        <result column="project_name" property="projectName" jdbcType="VARCHAR"/>
        <result column="item_price" property="itemPrice" jdbcType="DECIMAL"/>
    </resultMap>

    <select id="getRegistrationLog" resultMap="ItemResultMap">
        select distinct t.invoice_code, t.registration_id, t.amount, t.total_money, t.status, r.is_normal as project_status
        from transaction_log t, registration r
        where t.registration_id = #{registrationId} and t.type = "挂号费"
        and t.registration_id = r.id and t.total_money > 0 and t.is_frozen = 0
    </select>

    <select id="listLogsByTableName" resultMap="ItemResultMap">
        select distinct any_value(t.invoice_code) as invoice_code, any_value(t.registration_id) as registration_id, any_value(t.collection_id) as collection_id, any_value(t.project_id) as project_id,
        any_value(t.type) as type, any_value(t.status) as status, any_value(p.department_id) as department_id, any_value(p.status) as project_status, sum(t.total_money) as total_money
        from transaction_log t, ${tableName} p
        where t.collection_id = p.id and t.registration_id = #{registrationId}
        and t.project_id = p.project_id and t.total_money > 0 and t.status != 3 and t.is_frozen = 0
		GROUP BY t.collection_id, t.project_id
    </select>

    <select id="listRecipeLogs" resultMap="ItemResultMap">
        select distinct t.invoice_code, t.registration_id, t.collection_id, t.project_id, t.type, t.item_name,
        t.amount, t.total_money, t.status, r.department_id as department_id, r.status as project_status, r.remain_amount as remain_amount
        from transaction_log t, recipe r
        where t.collection_id = r.id and t.registration_id = #{registrationId}
        and t.project_id = r.medicine_id and t.total_money > 0 and t.is_frozen = 0
    </select>

    <select id="listItemsByCollectionIdAndProjectId" resultMap="BaseResultMap">
        select distinct t.*
        from transaction_log t
        where t.collection_id = #{collectionId} and t.project_id = #{projectId} and status = 1
    </select>

    <select id="listLogsByInvoiceCode" resultMap="BaseResultMap">
        select distinct t.*
        from transaction_log t
        where invoice_code = #{invoiceCode}
    </select>

    <update id="updateSelectiveAsReturned" parameterType="TransactionLog">
        update transaction_log set status = 3
        where invoice_code = #{invoiceCode} and is_frozen = 0
    </update>

    <select id="listIdByCollectionAndProjectId" resultType="integer">
        select id from transaction_log t
        where t.invoice_code = #{invoiceCode} and t.collection_id = #{collectionId} and t.project_id = #{projectId}
    </select>

    <select id="listInvoiceCodeAndStatusByRegistrationId" resultMap="ItemResultMap">
        select distinct invoice_code, status
        from transaction_log
        where registration_id = #{registrationId} and status != 1
    </select>

    <select id="listLogsByRegistrationIdAndDate" resultMap="BaseResultMap">
        select * from transaction_log t
        <where>
            <if test="beginDateStr != null">
                date_format(t.gmt_create,'%Y-%m-%d') &gt;= #{beginDateStr}
            </if>
            <if test="endDateStr != null">
                and date_format(t.gmt_create,'%Y-%m-%d') &lt;= #{endDateStr}
            </if>
            and registration_id = #{registrationId}
            and (status = 1 or status = 2)
        </where>
        order by t.gmt_modified desc
    </select>

    <select id="listLogsByCashierIdAndDate" resultType="HashMap">
        select invoice_code as invoiceCode, count(invoice_code) as totalInvoiceAmount, max(status) as status,
            SUM(total_money) as totalMoney, ANY_VALUE(type) as type, ANY_VALUE(pay_type) as payType,
            ANY_VALUE(registration_id) as registrationId, ANY_VALUE(p.name) as name
        from transaction_log t join patient p on t.patient_id = p.id
        <where>
            <if test="beginDateStr != null">
                and t.gmt_create &gt;= #{beginDateStr}
            </if>
            <if test="endDateStr != null">
                and t.gmt_create &lt;= #{endDateStr}
            </if>
            and t.cashier_id = #{cashierId} and t.is_frozen = 0
        </where>
        group by invoice_code
        order by invoice_code
    </select>

    <update id="updateTransactionLogsByInvoiceCode">
        update transaction_log set is_frozen = 1
        where invoice_code = #{invoiceCode}
    </update>

    <select id="getFirstLogDateByCashierId" resultType="string">
        select min(gmt_create) from transaction_log
        where cashier_id = #{cashierId}
    </select>

    <select id="listLogsByInvoiceRangeAndCashierId" resultType="HashMap">
        select invoice_code as invoiceCode, count(invoice_code) as totalInvoiceAmount, max(status) as status,
            SUM(total_money) as totalMoney, ANY_VALUE(type) as type, ANY_VALUE(pay_type) as payType,
            ANY_VALUE(registration_id) as registrationId, ANY_VALUE(p.name) as name
        from transaction_log t join patient p on t.patient_id = p.id
        where t.cashier_id = #{cashierId} and invoice_code &lt;= #{invoiceCodeEnd} and invoice_code &gt;= #{invoiceCodeBegin}
        and is_frozen = 1
        group by invoice_code
        order by invoice_code
    </select>

    <select id="countInvoiceCodeInRangeByCashierId" resultType="int">
        select count(invoice_code) from transaction_log t
        where t.cashier_id = #{cashierId} and invoice_code &lt;= #{invoiceCodeEnd} and invoice_code &gt;= #{invoiceCodeBegin}
        and is_frozen = 1
    </select>
    
    <select id="listInvoiceCodeByStatus" resultType="string">
        select distinct invoice_code from transaction_log t
        where t.cashier_id = #{cashierId} and invoice_code &lt;= #{invoiceCodeEnd} and invoice_code &gt;= #{invoiceCodeBegin}
        and status = #{status}
    </select>

    <select id="listTotalMoneyByType" resultType="HashMap">
        select type, sum(total_money) as total_money
        from transaction_log t
        where t.cashier_id = #{cashierId} and invoice_code &lt;= #{invoiceCodeEnd} and invoice_code &gt;= #{invoiceCodeBegin}
        group by type
    </select>

    <select id="calculateClinicianDepartmentsTotalMoney" resultType="HashMap">
        select r.department_name, sum(total_money) as total_money, t.type
        from transaction_log t, role r
        <where>
            <if test="type != null">
                and t.type = #{type}
            </if>
            and t.status = 2 and r.id = t.role_id
            and t.gmt_modified &lt;= #{endDateStr} and t.gmt_modified &gt;= #{beginDateStr}
            group by r.department_name, t.type
        </where>
    </select>

    <select id="countClinicianDepartmentsInvoices" resultType="HashMap">
        select r.department_name, count(distinct invoice_code) as invoice_amount
        from transaction_log t, role r
        <where>
            <if test="type != null">
                and t.type = #{type}
            </if>
            and t.status = 2 and r.id = t.role_id
            and t.gmt_modified &lt;= #{endDateStr} and t.gmt_modified &gt;= #{beginDateStr}
            group by r.department_name
        </where>
    </select>

    <select id="countClinicianDepartmentsVisits" resultType="HashMap">
        select r.department_name, count(distinct registration_id) as visits
        from patient_case pc, role r
        where pc.role_id = r.id and pc.status != 1
        and pc.gmt_modified &lt;= #{endDateStr} and pc.gmt_modified &gt;= #{beginDateStr}
        group by r.department_name
    </select>

    <select id="calculateExecutiveDepartmentsTotalMoney" resultType="HashMap">
        select r.department_name, SUM(total_money) as total_money, t.type
        from ${tableName} e, role r, transaction_log t
        where e.id = t.collection_id and t.project_id = e.${projectIdName} and r.id = e.${roleIdName}
        and t.status = 2 and t.registration_id = e.case_id
        and e.gmt_modified &lt;= #{endDateStr} and e.gmt_modified &gt;= #{beginDateStr}
        group by r.department_name, type
    </select>

    <select id="countExecutiveDepartmentsInvoices" resultType="HashMap">
        select r.department_name, count(distinct invoice_code) as invoice_amount
        from ${tableName} e, role r, transaction_log t
        where e.id = t.collection_id and t.project_id = e.${projectIdName} and r.id = e.${roleIdName}
        and t.status = 2 and t.registration_id = e.case_id
        and e.gmt_modified &lt;= #{endDateStr} and e.gmt_modified &gt;= #{beginDateStr}
        group by r.department_name
    </select>

    <select id="countExecutiveDepartmentsVisits" resultType="HashMap">
        select r.department_name, count(distinct registration_id) as visits
        from ${tableName} e, role r, transaction_log t
        where e.id = t.collection_id and t.project_id = e.${projectIdName} and r.id = e.${roleIdName}
        and t.status = 2 and (e.status = 2 or e.status = 4 or e.status = 5) and t.registration_id = e.case_id
        and e.gmt_modified &lt;= #{endDateStr} and e.gmt_modified &gt;= #{beginDateStr}
        group by r.department_name
    </select>

    <select id="calculateClinicianDoctorsTotalMoney" resultType="HashMap">
        select u.name, sum(total_money) as total_money, t.type
        from transaction_log t, role r, user u
        where t.status = 2 and r.id = t.role_id and r.user_id = u.id
        and t.gmt_modified &lt;= #{endDateStr} and t.gmt_modified &gt;= #{beginDateStr}
        group by u.name, t.type
    </select>

    <select id="countClinicianDoctorsInvoices" resultType="HashMap">
        select u.name, count(distinct invoice_code) as invoice_amount
        from transaction_log t, role r, user u
        where t.status = 2 and r.id = t.role_id and r.user_id = u.id
        and t.gmt_modified &lt;= #{endDateStr} and t.gmt_modified &gt;= #{beginDateStr}
        group by u.name
    </select>

    <select id="countClinicianDoctorsVisits" resultType="HashMap">
        select u.name, count(distinct registration_id) as visits
        from patient_case pc, role r, user u
        where pc.role_id = r.id and pc.status != 1 and r.user_id = u.id
        and pc.gmt_modified &lt;= #{endDateStr} and pc.gmt_modified &gt;= #{beginDateStr}
        group by u.name
    </select>

    <select id="calculateClinicianDoctorTotalMoney" resultType="HashMap">
        select r.id, r.department_name, r.title_name, sum(total_money) as total_money, t.type
        from transaction_log t, role r, user u
        where t.status = 2 and r.id = t.role_id and r.user_id = u.id and u.id = #{userId} and r.position_name = "门诊医生"
        and date_format(t.gmt_modified,'%Y-%m-%d') &lt;= #{endDateStr} and date_format(t.gmt_modified,'%Y-%m-%d') &gt;= #{beginDateStr}
        group by r.id, t.type
    </select>

    <select id="countClinicianDoctorInvoices" resultType="HashMap">
        select r.id, r.department_name, r.title_name, count(distinct invoice_code) as invoice_amount
        from transaction_log t, role r, user u
        where t.status = 2 and r.id = t.role_id and r.user_id = u.id and u.id = #{userId} and r.position_name = "门诊医生"
        and date_format(t.gmt_modified,'%Y-%m-%d') &lt;= #{endDateStr} and date_format(t.gmt_modified,'%Y-%m-%d') &gt;= #{beginDateStr}
        group by r.id
    </select>

    <select id="countClinicianDoctorVisits" resultType="HashMap">
        select r.id, r.department_name, r.title_name, count(distinct registration_id) as visits
        from patient_case pc, role r, user u
        where pc.role_id = r.id and pc.status != 1 and r.user_id = u.id and u.id = #{userId} and r.position_name = "门诊医生"
        and date_format(pc.gmt_modified,'%Y-%m-%d') &lt;= #{endDateStr} and date_format(pc.gmt_modified,'%Y-%m-%d') &gt;= #{beginDateStr}
        group by r.id
    </select>

</mapper>